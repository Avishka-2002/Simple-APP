// This is our Jenkins Pipeline Script
pipeline {
    agent any // Run on any available Jenkins agent

    environment {
        // Define environment variables
        DOCKERHUB_CREDENTIALS = credentials('dockerhub-creds') // We will create this in Jenkins
        DOCKER_IMAGE = "mgavishka/simple_app"
    }

    stages {
        stage('‚ë† Clone Code') { // Stage 1: Get the code
            steps {
                echo 'Cloning the repository...'
                checkout scm
            }
        }

        stage('‚ë° Build Application') { // Stage 2: Install dependencies
            steps {
                echo 'Building the application...'
                sh 'npm install'
            }
        }

        stage('‚ë¢ Test Application') { // Stage 3: Run tests (add your tests here)
            steps {
                echo 'Testing the application... (no tests configured, skipping)'
                // Example: sh 'npm test'
            }
        }

        stage('‚ë£ Generate Version & Badge') { // Stage 4: Create a unique version
            steps {
                script {
                    // Create a version using the date and build number
                    def version = "1.0.${BUILD_NUMBER}"
                    sh "echo ${version} > version.txt" // Save version to a file
                    env.ARTIFACT_VERSION = version // Save to an environment variable for later stages

                    // Generate a badge URL using shields.io
                    def badgeUrl = "https://img.shields.io/badge/version-${version}-blue"
                    echo "‚úÖ Your new version is: ${version}"
                    echo "üéñÔ∏è Your badge URL is: ${badgeUrl}"
                }
            }
        }

        stage('‚ë§ Containerize & Push') { // Stage 5: Build and push the Docker image
            steps {
                script {
                    // Use the version we created as the Docker tag
                    def imageNameWithTag = "${DOCKER_IMAGE}:${env.ARTIFACT_VERSION}"
                    def latestTag = "${DOCKER_IMAGE}:latest"

                    withDockerRegistry(credentialsId: 'dockerhub-creds') {
                        echo "Building Docker image: ${imageNameWithTag}"
                        sh "docker build -t ${imageNameWithTag} ."

                        echo "Pushing image to Docker Hub..."
                        sh "docker push ${imageNameWithTag}"

                        echo "Tagging and pushing 'latest'..."
                        sh "docker tag ${imageNameWithTag} ${latestTag}"
                        sh "docker push ${latestTag}"
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline finished.'
            cleanWs() // Clean up the workspace
        }
    }
}